const compteSchema = require("../models/comptes");
const compteValidation = require("../validation/comptes");








const createcompte = async (req, res) => {
    let { error, value } = compteValidation.validate(req.body);
    if (error) {
        return res.status(400).json({ message: error.details[0].message });
    }
    try {
        let newcompte = await compteSchema.create(req.body);
        res.status(201).json(newcompte);
    } catch (e) {
        console.log(e);
        res.status(500).json({ message: "no created data" });
    }
};

const getAllcomptes = async (req, res) => {
    try {
        let comptes = await compteSchema.find();
        res.status(200).json(comptes);
    } catch (e) {
        res.status(500).json({ message: "compte error" });
    }
};

const getcompteById = async (req, res) => {
    let compteId = req.params.id;

    try {
        let compte = await compteSchema.findById(compteId);
        res.json(compte);
    } catch (e) {
        return res.status(400).json({ message: "No compte with id " + compteId });
    }
};

const updatecompteById = async (req, res) => {
    // verification de l'existence de l'element 
    const compteId = req.params.id;

    // validate data
    let { error, value } = compteValidation.validate(req.body);
    if (error) {
        return res.status(400).json({ message: error.details[0].message });
    }
    // find and update
    try {
        console.log(value);
        const compte = await compteSchema.findByIdAndUpdate(compteId, value, { new: true });
        res.json(compte);
    } catch (e) {
        return res.status(404).json({ message: "compte with id not found" });
    }
};

const deletecompteById = async (req, res) => {
    let compteId = req.params.id;
    try {
        let compte = await compteSchema.findByIdAndDelete(compteId);
        res.json({ message: "deleted element with id " + compteId });
    } catch (e) {
        res.status(404).json({ message: "no compte with id " + compteId });
    }
};

module.exports = {
    getAllcomptes,
    getcompteById,
    createcompte,
    deletecompteById,
    updatecompteById
};